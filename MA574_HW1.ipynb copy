{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3b4df8f3",
   "metadata": {},
   "source": [
    "# MA 574: Programming Assignment 1\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf5849e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "facda38c",
   "metadata": {},
   "source": [
    "## Question 1\n",
    "\n",
    "The following should be noted regarding scaling the rows or columns of a matrix\n",
    "\n",
    "- the multiplication by a diagonal matrix $D_l$ from the left scales the rows of a matrix by the respective diagonal entries in $D_l$. For example\n",
    "$$\n",
    "\\begin{bmatrix}d_{11} & 0 & 0\\\\ 0 & d_{22} & 0 \\\\0 & 0 & d_{33} \\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "a_{11} & a_{12} & a_{13}& a_{14}\\\\ \n",
    "a_{21} & a_{22} & a_{23}& a_{24} \\\\\n",
    "a_{31} & a_{32} & a_{33}& a_{34} \n",
    "\\end{bmatrix}=\\begin{bmatrix}\n",
    "d_{11}\\,a_{11} & d_{11}\\,a_{12} & d_{11}\\,a_{13} & d_{11}\\, a_{14}\\\\ \n",
    "d_{22}\\,a_{21} & d_{22}\\,a_{22} & d_{22}\\,a_{23} & d_{22}\\, a_{24} \\\\\n",
    "d_{33}\\,a_{31} & d_{33}\\,a_{32} & d_{33}\\,a_{33} & d_{33}\\, a_{34}\n",
    "\\end{bmatrix}.\n",
    "$$\n",
    "\n",
    "- the multiplication by a diagonal matrix $D_r$ from the right scales the columns of a matrix by the respective diagonal entries in $D_r$.\n",
    "$$\n",
    "\\begin{bmatrix}\n",
    "a_{11} & a_{12} & a_{13}& a_{14}\\\\ \n",
    "a_{21} & a_{22} & a_{23}& a_{24} \\\\\n",
    "a_{31} & a_{32} & a_{33}& a_{34} \n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "d_{11} & 0 & 0 & 0\\\\ \n",
    "0 & d_{22} & 0& 0 \\\\\n",
    "0 & 0 & d_{33} & 0\\\\\n",
    "0 & 0 & 0 & d_{44} \n",
    "\\end{bmatrix}=\n",
    "\\begin{bmatrix}\n",
    "d_{11}\\,a_{11} & d_{22}\\,a_{12} & d_{33}\\,a_{13}& d_{44}\\,a_{14}\\\\ \n",
    "d_{11}\\,a_{21} & d_{22}\\,a_{22} & d_{33}\\,a_{23}& d_{44}\\,a_{24} \\\\\n",
    "d_{11}\\,a_{31} &d_{22}\\, a_{32} & d_{33}\\,a_{33} &d_{44}\\, a_{34}\n",
    "\\end{bmatrix}.\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a48ddf9",
   "metadata": {},
   "source": [
    "Answer the following\n",
    "\n",
    "A. Create a random matrix $A$ of order $4 \\times 5 $ made of integers ranging from $-9$ to $9$. Print this matrix.\n",
    "\n",
    "B. Ask the user to provide $4$ natural numbers. Write the Python code to **efficiently perform** the row scaling of the matrix $A$ by using the above inputs. Print the row-scaled matrix.\n",
    "\n",
    "C. Ask the user to provide $5$ natural numbers. Write Python code to **efficiently perform** the column scaling of the matrix $A$ by using the above inputs.  Print the column-scaled matrix.\n",
    "\n",
    "D. Create a random matrix $A$ of order $3 \\times 4 $. Use the idea of a permutation vector and a permutation matrix to **efficiently provide the shuffled**  rows in order $(3, 1, 2)$ and columns in order $(3, 4, 1, 2)$ of the matrix $A$. Use the following code.\n",
    "\n",
    "> Left multiplication of a matrix $A$ by a permutation matrix $P_l$ swaps the rows of $A$ according to the ordering given by a permutation vector.\n",
    "\n",
    ">Right multiplication of a matrix $A$ by a permutation matrix $P_r^T$ swaps the columns of $A$ according to the ordering given by a permutation vector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "a40d4bde-1f0a-45b8-8743-a5483c990d2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A) Random matrix: \n",
      " [[-1 -7  0 -1 -6]\n",
      " [-3 -4 -2  1 -1]\n",
      " [-2  4 -5  2 -7]\n",
      " [-8  1  5 -9 -7]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "#create matrix random\n",
    "matrix1 = np.random.randint(-9,9,size=(4,5))\n",
    "print('A) Random matrix: \\n', matrix1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "e8757d7e-aab8-468d-86af-1b9495ff5ce8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "B) Row-Scaled Matrix\n",
      "\n",
      "Rand matrix: \n",
      " [[-1 -7  0 -1 -6]\n",
      " [-3 -4 -2  1 -1]\n",
      " [-2  4 -5  2 -7]\n",
      " [-8  1  5 -9 -7]]\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a natrual number: 1\n",
      "Enter a natrual number: 1\n",
      "Enter a natrual number: 1\n",
      "Enter a natrual number: 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "B) Row-Scaled Matrix:\n",
      "\n",
      "[[-1 -7  0 -1 -6]\n",
      " [-3 -4 -2  1 -1]\n",
      " [-2  4 -5  2 -7]\n",
      " [-8  1  5 -9 -7]]\n"
     ]
    }
   ],
   "source": [
    "print('\\nB) Row-Scaled Matrix\\n')\n",
    "print('Rand matrix: \\n',matrix1)\n",
    "nums=[]\n",
    "for i in range (0,4):\n",
    "    num = 0\n",
    "    while num <= 0: #keep asking till input is natural int\n",
    "        num = int(input('Enter a natrual number:'))\n",
    "        if num <=0:\n",
    "            print('Enter a natural number greater than 0')\n",
    "    nums.append(num)\n",
    "matrix2 = np.diag(nums)\n",
    "print('\\nB) Row-Scaled Matrix:\\n')\n",
    "print(np.dot(matrix2,matrix1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "55134db7-a386-4412-b48e-aa3812eb584d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "C) Column-Scaled Matrix\n",
      "\n",
      "Rand matrix: \n",
      " [[-1 -7  0 -1 -6]\n",
      " [-3 -4 -2  1 -1]\n",
      " [-2  4 -5  2 -7]\n",
      " [-8  1  5 -9 -7]]\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a natrual number: 1\n",
      "Enter a natrual number: 1\n",
      "Enter a natrual number: 1\n",
      "Enter a natrual number: 1\n",
      "Enter a natrual number: 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Column-Scaled Matrix:\n",
      "\n",
      "[[-1 -7  0 -1 -6]\n",
      " [-3 -4 -2  1 -1]\n",
      " [-2  4 -5  2 -7]\n",
      " [-8  1  5 -9 -7]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "print('\\nC) Column-Scaled Matrix\\n')\n",
    "print('Rand matrix: \\n',matrix1)\n",
    "nums=[]\n",
    "for i in range (0,5):\n",
    "    num = 0\n",
    "    while num <= 0: #keep asking till input is natural int\n",
    "        num = int(input('Enter a natrual number:'))\n",
    "        if num <=0:\n",
    "            print('Enter a natural number greater than 0')\n",
    "    nums.append(num)\n",
    "matrix2 = np.diag(nums)\n",
    "print('\\nColumn-Scaled Matrix:\\n')\n",
    "print(np.dot(matrix1,matrix2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "40c8dbe5-79db-4a9d-94e0-cd6743d8d450",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "D) Permutation Matrix\n",
      "\n",
      "Rand matrix: \n",
      " [[-6 -5  5 -5]\n",
      " [ 0  2 -9  4]\n",
      " [ 4  4 -2 -6]]\n",
      "\n",
      "Row-Permutated(3,1,2) matrix: \n",
      " [[ 4  4 -2 -6]\n",
      " [-6 -5  5 -5]\n",
      " [ 0  2 -9  4]]\n",
      "\n",
      "Column-Permutated(3,4,1,2) matrix: \n",
      " [[-2 -6  4  4]\n",
      " [ 5 -5 -6 -5]\n",
      " [-9  4  0  2]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print('\\nD) Permutation Matrix\\n')\n",
    "matrix = np.random.randint(-9,9,size=(3,4))\n",
    "print('Rand matrix: \\n',matrix)\n",
    "\n",
    "p_vec1 = [3,1,2]\n",
    "p_vec2 = [3,4,1,2]\n",
    "I4 = np.eye(4)\n",
    "\n",
    "#print(I3[p_vec1,:]) This format gives me error, I couldn't figure it out(error is at the end)\n",
    "#I4 = np.eye(4)\n",
    "P1=np.array([[0,0,1],[1,0,0],[0,1,0]])\n",
    "P2=np.array([[0,0,1,0],[0,0,0,1],[1,0,0,0],[0,1,0,0]])\n",
    "\n",
    "matrix2 = np.dot(P1,matrix)\n",
    "print('\\nRow-Permutated(3,1,2) matrix: \\n',matrix2)\n",
    "print('\\nColumn-Permutated(3,4,1,2) matrix: \\n',np.dot(matrix2,P2))\n",
    "\n",
    "\n",
    "\n",
    "##Error;\n",
    "#p_vec = [3,1,2]\n",
    "#I3 = np.eye(3)\n",
    "#P = I3[p_vec,:]\n",
    "#print(P)\n",
    "#\n",
    "#---------------------------------------------------------------------------\n",
    "#IndexError                                Traceback (most recent call last)\n",
    "#Cell In[98], line 23\n",
    "#     21 p_vec = [3,1,2]\n",
    "#     22 I3 = np.eye(3)\n",
    "#---> 23 P = I3[p_vec,:]\n",
    "#     24 print(P)\n",
    "\n",
    "#IndexError: index 3 is out of bounds for axis 0 with size 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "6515abf6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The given ordering is:\n",
      " [3, 0, 1, 2]\n",
      "\n",
      " The required permutation matrix is:\n",
      " [[0. 0. 0. 1.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]]\n"
     ]
    }
   ],
   "source": [
    "# Find a permutation matrix that changes row or column ordering from [0,1,2,3] to [3,0,1,2]\n",
    "p_vec = [3,0,1,2]\n",
    "I4 = np.eye(4)\n",
    "P = I4[p_vec,:]\n",
    "\n",
    "print(\"The given ordering is:\\n\",p_vec)\n",
    "print(\"\\n The required permutation matrix is:\\n\",P)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a24d4417",
   "metadata": {},
   "source": [
    "## Question 2\n",
    "\n",
    "Download the [iris flower dataset](https://archive.ics.uci.edu/dataset/53/iris) on your computer. Load the data into a dataframe and into a matrix $X$ subsequently. Do the following on the data-matrix.\n",
    "\n",
    "A. Find the maximum, minimum, mean, standard deviation etc. of the four features (columns) by using basic NumPy functions.\n",
    "\n",
    "B. Find the covariance and correlation coefficient of the second and the third features.\n",
    "\n",
    "C. Find the mean and the standard deviation of the features for the three different types of flowers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "97c618dd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset: (150, 5) \n",
      "    sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n",
      "0                5.1               3.5                1.4               0.2   \n",
      "1                4.9               3.0                1.4               0.2   \n",
      "2                4.7               3.2                1.3               0.2   \n",
      "3                4.6               3.1                1.5               0.2   \n",
      "4                5.0               3.6                1.4               0.2   \n",
      "\n",
      "         class  \n",
      "0  Iris-setosa  \n",
      "1  Iris-setosa  \n",
      "2  Iris-setosa  \n",
      "3  Iris-setosa  \n",
      "4  Iris-setosa  \n",
      "\n",
      "A) Finding the maximum, minimum, mean, standard deviation of columns:\n",
      "\n",
      "Sepal Length (cm) :\n",
      "  Max Val = 7.9 \n",
      "  Min Val =  4.3 \n",
      "  Mean =  5.843333333333334 \n",
      "  Standart Dev =  0.8280661279778629\n",
      "\n",
      "Sepal Width (cm) :\n",
      "  Max Val = 4.4 \n",
      "  Min Val =  2.0 \n",
      "  Mean =  3.0540000000000003 \n",
      "  Standart Dev =  0.4335943113621737\n",
      "\n",
      "Petal Length (cm) :\n",
      "  Max Val = 6.9 \n",
      "  Min Val =  1.0 \n",
      "  Mean =  3.758666666666666 \n",
      "  Standart Dev =  1.7644204199522617\n",
      "\n",
      "Petal Width (cm) :\n",
      "  Max Val = 2.5 \n",
      "  Min Val =  0.1 \n",
      "  Mean =  1.1986666666666668 \n",
      "  Standart Dev =  0.7631607417008414\n",
      "\n",
      "B) Finding the covariance and correlation coefficient of the second and the third features:\n",
      "\n",
      "Covariance:\n",
      " [[ 0.18800403 -0.32171275]\n",
      " [-0.32171275  3.11317942]]\n",
      "Correlation Coefficient : -0.42051609640115445\n",
      "\n",
      "C) Find the mean and the standard deviation of the features for the three different types of flowers:\n",
      "['Iris-setosa' 'Iris-versicolor' 'Iris-virginica']\n",
      "\n",
      "Mean values for each flower:\n",
      "                  sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n",
      "class                                                                     \n",
      "Iris-setosa                  5.006             3.418              1.464   \n",
      "Iris-versicolor              5.936             2.770              4.260   \n",
      "Iris-virginica               6.588             2.974              5.552   \n",
      "\n",
      "                 petal width (cm)  \n",
      "class                              \n",
      "Iris-setosa                 0.244  \n",
      "Iris-versicolor             1.326  \n",
      "Iris-virginica              2.026  \n",
      "\n",
      "Standard deviation for each flower:\n",
      "                  sepal length (cm)  sepal width (cm)  petal length (cm)  \\\n",
      "class                                                                     \n",
      "Iris-setosa               0.352490          0.381024           0.173511   \n",
      "Iris-versicolor           0.516171          0.313798           0.469911   \n",
      "Iris-virginica            0.635880          0.322497           0.551895   \n",
      "\n",
      "                 petal width (cm)  \n",
      "class                              \n",
      "Iris-setosa              0.107210  \n",
      "Iris-versicolor          0.197753  \n",
      "Iris-virginica           0.274650  \n"
     ]
    }
   ],
   "source": [
    "# Python code\n",
    "from sklearn import datasets\n",
    "iris = datasets.load_iris().data\n",
    "# Your code follows from here\n",
    "    \n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "data_path = 'iris/iris.data'\n",
    "\n",
    "#load the data into framework\n",
    "column_names = ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)', 'class']\n",
    "df = pd.read_csv(data_path, header=None, names=column_names)\n",
    "\n",
    "\n",
    "print('Dataset:',df.shape,'\\n',df.head())\n",
    "\n",
    "print('\\nA) Finding the maximum, minimum, mean, standard deviation of columns:')\n",
    "print('\\nSepal Length (cm) :\\n  Max Val =', df[df.columns[0]].max(), \n",
    "      '\\n  Min Val = ',df[df.columns[0]].min(), \n",
    "      '\\n  Mean = ',df[df.columns[0]].mean(), \n",
    "      '\\n  Standart Dev = ',df[df.columns[0]].std())\n",
    "print('\\nSepal Width (cm) :\\n  Max Val =', df[df.columns[1]].max(), \n",
    "      '\\n  Min Val = ',df[df.columns[1]].min(), \n",
    "      '\\n  Mean = ',df[df.columns[1]].mean(), \n",
    "      '\\n  Standart Dev = ',df[df.columns[1]].std())\n",
    "print('\\nPetal Length (cm) :\\n  Max Val =', df[df.columns[2]].max(), \n",
    "      '\\n  Min Val = ',df[df.columns[2]].min(), \n",
    "      '\\n  Mean = ',df[df.columns[2]].mean(), \n",
    "      '\\n  Standart Dev = ',df[df.columns[2]].std())\n",
    "print('\\nPetal Width (cm) :\\n  Max Val =', df[df.columns[3]].max(), \n",
    "      '\\n  Min Val = ',df[df.columns[3]].min(), \n",
    "      '\\n  Mean = ',df[df.columns[3]].mean(), \n",
    "      '\\n  Standart Dev = ',df[df.columns[3]].std())\n",
    "\n",
    "print('\\nB) Finding the covariance and correlation coefficient of the second and the third features:')\n",
    "second_feature = df[df.columns[1]]\n",
    "third_feature = df[df.columns[2]]\n",
    "print('\\nCovariance:\\n',np.cov(second_feature,third_feature))\n",
    "print('Correlation Coefficient :',np.corrcoef(second_feature, third_feature)[0, 1])\n",
    "\n",
    "print('\\nC) Find the mean and the standard deviation of the features for the three different types of flowers:')\n",
    "\n",
    "# group  by class\n",
    "print(df['class'].unique())\n",
    "group = df.groupby('class')\n",
    "\n",
    "# Mean and standart deviation\n",
    "print(\"\\nMean values for each flower:\\n\", group.mean())\n",
    "print(\"\\nStandard deviation for each flower:\\n\", group.std())\n",
    "#\n",
    "#name_path = 'iris/iris.names'\n",
    "#with open(name_path,'r') as file:\n",
    "#    iris_names = file.read()\n",
    "#    print('\\n',iris_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efcb50ab",
   "metadata": {},
   "source": [
    "## Question 3\n",
    "\n",
    "On matrix multiplication, $C_{(m \\times n)} = A_{(m \\times p)} B_{(p \\times n)} $ you should note the following.\n",
    "\n",
    "- **Inner product form** of matrix multiplication\n",
    "$$  C_{ij} = A_{i:} B_{:j} = \\sum\\limits_{k=1}^p\\;A_{ik}\\;B_{kj}. $$\n",
    "\n",
    "    - This implies that any specific column of the product could be found in the following way\n",
    "    $$\n",
    "    C_{:j} = [AB]_{:j} = AB_{:j}\n",
    "    $$\n",
    "    - This also implies that any specific row of the product could be found in the following way\n",
    "    $$\n",
    "    C_{i:} = [AB]_{i:} = A_{i:} B\n",
    "    $$\n",
    "- **Outer product form** of matrix multiplication expresses $C$ as a sum of rank one matrices as\n",
    "$$\n",
    "C = A_{:1} B_{1:} + A_{:2} B_{2:} + \\ldots + A_{:p} B_{p:} \n",
    "$$\n",
    "where $A_{:k} B_{k:}$ is a rank-1 matrix of order $m \\times n$ found by the product of column-$k$ of $A$ and row-$k$ of $B$.\n",
    "\n",
    "Answer the following\n",
    "\n",
    "A. Create two random matrices $A$, and $B$ of integers ranging from $-5$ to $5$ of order $3 \\times 5$ and $5 \\times 4$ respectively. Print these matrices.\n",
    "\n",
    "B. Print the second row of the product $AB$ \n",
    "\n",
    "C. Print the submatrix of the product made of the first and the third column without calculating the product.\n",
    "\n",
    "D. Find the submatrix made from the first and third rows and the second and fourth coumns of the product $AB$\n",
    "\n",
    "E. Implement the outer product form of the matrix multiplication as a function. Print the product $AB$ that comes as an output of this function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "a9b7c411-56a3-457f-b101-ad31802144b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A) Print s random matrices;\n",
      "  Matrix A:\n",
      " [[ 1  0  4 -4 -4]\n",
      " [ 2  0 -4  1 -1]\n",
      " [ 0 -3  4  1  1]] \n",
      "  Matrix B:\n",
      " [[-4  3 -5  4]\n",
      " [-5  1  3  2]\n",
      " [-3  0 -2 -3]\n",
      " [-1 -5 -1  3]\n",
      " [ 1  3  0  2]]\n",
      "\n",
      "B) Second row of AB :  [ 2 -2 -3 21]\n",
      "AB :\n",
      " [[-16  11  -9 -28]\n",
      " [  2  -2  -3  21]\n",
      " [  3  -5 -18 -13]]\n",
      "\n",
      "C) Finding the submatrix from first and third columns, without calculation:\n",
      "Submatrix:\n",
      " [[-16  -9]\n",
      " [  2  -3]\n",
      " [  3 -18]]\n",
      "\n",
      "D) Submatrix made from first and third rows and second and forth columns of AB:\n",
      "[[ 11 -28]\n",
      " [ -5 -13]]\n",
      "E) Implement the outer product form of the matrix multiplication as a function: \n",
      "[[-16.  11.  -9. -28.]\n",
      " [  2.  -2.  -3.  21.]\n",
      " [  3.  -5. -18. -13.]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "##rand matrices\n",
    "mA = np.random.randint(-5,5,size = (3,5))\n",
    "mB = np.random.randint(-5,5,size = (5,4))\n",
    "\n",
    "print('A) Print s random matrices;\\n  Matrix A:\\n',mA,'\\n  Matrix B:\\n',mB)\n",
    "mAB = np.dot(mA,mB)\n",
    "\n",
    "print('\\nB) Second row of AB : ', mAB[1])\n",
    "print('AB :\\n',mAB)\n",
    "\n",
    "print('\\nC) Finding the submatrix from first and third columns, without calculation:')\n",
    "print('Submatrix:\\n',mAB[:, [0, 2]])\n",
    "\n",
    "print('\\nD) Submatrix made from first and third rows and second and forth columns of AB:')\n",
    "print(mAB[[0,2],:][:,[1,3]])\n",
    "\n",
    "print('E) Implement the outer product form of the matrix multiplication as a function: ')\n",
    "def outter_product(A,B):\n",
    "    m,p = A.shape\n",
    "    p,n = B.shape\n",
    "    result = np.zeros((m,n))\n",
    "    for k in range(p):\n",
    "        Ak = A[:,k].reshape(m,1)\n",
    "        Bk = B[k,:].reshape(1,n)\n",
    "        #print(Ak,'-',Bk)\n",
    "        result += np.dot(Ak,Bk)\n",
    "    return result\n",
    "mAB = outter_product(mA,mB)\n",
    "print(mAB)   \n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13f1a815",
   "metadata": {},
   "source": [
    "## Question 4\n",
    "\n",
    "Download this text file on your computer [Geetanjali by Tagore](https://www.gutenberg.org/cache/epub/7164/pg7164.txt)\n",
    "\n",
    "Write Python code to read this text file and to answer the following.\n",
    "\n",
    "A. Provide some basic statistics such as number of characters, number of words, and number of sentences in the file.\n",
    "\n",
    "B. Provide a bar-chart for the number of each vowels (including 'y') in this textfile.\n",
    "\n",
    "C. Provide a pie-chart for the number of words of length 3, 4, 5, 6, and other longer words as one category.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "280aa016-b822-4656-b366-8ade0e05c311",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A) # of characters =  95136 ,\n",
      "   # of words 17556 ,\n",
      "   # of sentences 1092\n",
      "B) bar-chart of each vowels\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C) Pie chart for nums of words length 3,4,5,6 and longer:\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Your Code Here\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "with open('pg7164.txt','r',encoding = 'utf-8') as f:\n",
    "    text = f.read()\n",
    "    #3print(text)\n",
    "\n",
    "print('A) # of characters = ',len(text),',\\n   # of words',len(text.split()),',\\n   # of sentences',text.count('.')+text.count('!')+text.count('?'))\n",
    "\n",
    "print('B) bar-chart of each vowels\\n')\n",
    "\n",
    "data = {'A':text.count('a'), 'e':text.count('e'), 'i':text.count('i'),'o':text.count('o'),'u':text.count('o'),'y':text.count('y'), }\n",
    "vowels = list(data.keys())\n",
    "nums = list(data.values())\n",
    "fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(vowels, nums, color ='brown', width = 0.4)\n",
    "plt.xlabel(\"Vowels\")\n",
    "plt.ylabel(\"# of vowels\")\n",
    "plt.title(\"Bar-chart for vowels in txt file\")\n",
    "plt.show()\n",
    "print('C) Pie chart for nums of words length 3,4,5,6 and longer:')\n",
    "\n",
    "# Creating dataset\n",
    "words = text.split()\n",
    "\n",
    "a,b,c,d,e = 0,0,0,0,0\n",
    "for word in words:\n",
    "    if len(word) == 3 : \n",
    "        a+=1\n",
    "    if len(word) == 4 : \n",
    "        b+=1\n",
    "    if len(word) == 5 : \n",
    "        c+=1\n",
    "    if len(word) == 6 : \n",
    "        d+=1\n",
    "    if len(word) >= 7 : \n",
    "        e+=1\n",
    "    \n",
    "lengths = ['3', '4', '5','6', '>6']\n",
    "data = [ a , b, c, d , e]\n",
    "\n",
    "fig = plt.figure(figsize=(10, 7))\n",
    "plt.pie(data, labels=lengths)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "decb22b8-8b02-4f06-acfa-2b7b854965c4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
